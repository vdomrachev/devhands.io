---
- name: Configure Ubuntu server for maximum Nginx RPS with performance testing
  hosts: ubuntu_servers
  become: yes
  vars:
    nginx_user: www-data
    nginx_worker_processes: "{{ ansible_processor_vcpus }}"
    nginx_worker_connections: 4096
    test_duration: 30s
    test_threads: 4
    test_connections: 100
    test_url: "http://localhost/"
    results_dir: "/tmp/nginx_performance_results"

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - nginx
          - build-essential
          - git
          - htop
          - iotop
          - sysstat
        state: present

    - name: Install wrk from source
      block:
        - name: Clone wrk repository
          git:
            repo: https://github.com/wg/wrk.git
            dest: /tmp/wrk
            force: yes

        - name: Build wrk
          make:
            chdir: /tmp/wrk

        - name: Install wrk binary
          copy:
            src: /tmp/wrk/wrk
            dest: /usr/local/bin/wrk
            mode: '0755'
            remote_src: yes

    - name: Create results directory
      file:
        path: "{{ results_dir }}"
        state: directory
        mode: '0755'

    - name: Configure system limits for high performance
      block:
        - name: Set system limits in limits.conf
          blockinfile:
            path: /etc/security/limits.conf
            block: |
              * soft nofile 65535
              * hard nofile 65535
              * soft nproc 65535
              * hard nproc 65535
              root soft nofile 65535
              root hard nofile 65535

        - name: Configure sysctl for high performance
          sysctl:
            name: "{{ item.key }}"
            value: "{{ item.value }}"
            state: present
            reload: yes
          loop:
            - { key: "net.core.somaxconn", value: "65535" }
            - { key: "net.core.netdev_max_backlog", value: "5000" }
            - { key: "net.core.rmem_default", value: "262144" }
            - { key: "net.core.rmem_max", value: "16777216" }
            - { key: "net.core.wmem_default", value: "262144" }
            - { key: "net.core.wmem_max", value: "16777216" }
            - { key: "net.ipv4.tcp_wmem", value: "4096 65536 16777216" }
            - { key: "net.ipv4.tcp_rmem", value: "4096 65536 16777216" }
            - { key: "net.ipv4.tcp_max_syn_backlog", value: "30000" }
            - { key: "net.ipv4.tcp_max_tw_buckets", value: "2000000" }
            - { key: "net.ipv4.tcp_tw_reuse", value: "1" }
            - { key: "net.ipv4.tcp_fin_timeout", value: "10" }
            - { key: "net.ipv4.tcp_slow_start_after_idle", value: "0" }
            - { key: "net.ipv4.tcp_keepalive_time", value: "60" }
            - { key: "net.ipv4.tcp_keepalive_intvl", value: "10" }
            - { key: "net.ipv4.tcp_keepalive_probes", value: "6" }
            - { key: "net.ipv4.ip_local_port_range", value: "1024 65535" }
            - { key: "fs.file-max", value: "2097152" }
            - { key: "vm.swappiness", value: "1" }

    - name: Create baseline nginx configuration
      template:
        src: nginx_baseline.conf.j2
        dest: /etc/nginx/nginx.conf
        backup: yes
      vars:
        worker_processes: "{{ nginx_worker_processes }}"
        worker_connections: "{{ nginx_worker_connections }}"
        keepalive_timeout: 65
        keepalive_requests: 1000
        sendfile: "on"
        tcp_nopush: "on"
        tcp_nodelay: "on"
        gzip: "off"

    - name: Create simple test page
      copy:
        content: |
          <!DOCTYPE html>
          <html><head><title>Performance Test</title></head>
          <body><h1>Nginx Performance Test Page</h1><p>Server: {{ ansible_hostname }}</p></body></html>
        dest: /var/www/html/index.html

    - name: Start and enable nginx
      systemd:
        name: nginx
        state: started
        enabled: yes

    - name: Test baseline configuration
      shell: |
        echo "=== Baseline Configuration Test ===" > {{ results_dir }}/baseline_results.txt
        wrk -t{{ test_threads }} -c{{ test_connections }} -d{{ test_duration }} {{ test_url }} >> {{ results_dir }}/baseline_results.txt
        echo "" >> {{ results_dir }}/baseline_results.txt

    - name: Configure and test high-performance nginx settings
      block:
        - name: High-performance nginx configuration
          template:
            src: nginx_optimized.conf.j2
            dest: /etc/nginx/nginx.conf
          vars:
            worker_processes: "{{ nginx_worker_processes }}"
            worker_connections: 8192
            keepalive_timeout: 30
            keepalive_requests: 10000
            sendfile: "on"
            tcp_nopush: "on"
            tcp_nodelay: "on"
            gzip: "off"

        - name: Reload nginx with optimized config
          systemd:
            name: nginx
            state: reloaded

        - name: Wait for nginx to be ready
          wait_for:
            port: 80
            delay: 2

        - name: Test optimized configuration
          shell: |
            echo "=== Optimized Configuration Test ===" >> {{ results_dir }}/optimized_results.txt
            wrk -t{{ test_threads }} -c{{ test_connections }} -d{{ test_duration }} {{ test_url }} >> {{ results_dir }}/optimized_results.txt
            echo "" >> {{ results_dir }}/optimized_results.txt

    - name: Test with different connection counts
      shell: |
        echo "=== Testing with {{ item }} connections ===" >> {{ results_dir }}/connection_scaling_results.txt
        wrk -t{{ test_threads }} -c{{ item }} -d{{ test_duration }} {{ test_url }} >> {{ results_dir }}/connection_scaling_results.txt
        echo "" >> {{ results_dir }}/connection_scaling_results.txt
      loop:
        - 50
        - 100
        - 200
        - 500
        - 1000

    - name: Test with gzip enabled
      block:
        - name: Enable gzip in nginx
          template:
            src: nginx_gzip.conf.j2
            dest: /etc/nginx/nginx.conf
          vars:
            worker_processes: "{{ nginx_worker_processes }}"
            worker_connections: 8192
            keepalive_timeout: 30
            keepalive_requests: 10000
            sendfile: "on"
            tcp_nopush: "on"
            tcp_nodelay: "on"
            gzip: "on"

        - name: Reload nginx with gzip config
          systemd:
            name: nginx
            state: reloaded

        - name: Wait for nginx to be ready
          wait_for:
            port: 80
            delay: 2

        - name: Test with gzip enabled
          shell: |
            echo "=== Gzip Enabled Test ===" >> {{ results_dir }}/gzip_results.txt
            wrk -t{{ test_threads }} -c{{ test_connections }} -d{{ test_duration }} {{ test_url }} >> {{ results_dir }}/gzip_results.txt
            echo "" >> {{ results_dir }}/gzip_results.txt

    - name: Generate performance summary
      shell: |
        echo "=== NGINX PERFORMANCE TEST SUMMARY ===" > {{ results_dir }}/summary.txt
        echo "Test Date: $(date)" >> {{ results_dir }}/summary.txt
        echo "Server: {{ ansible_hostname }}" >> {{ results_dir }}/summary.txt
        echo "CPU Cores: {{ ansible_processor_vcpus }}" >> {{ results_dir }}/summary.txt
        echo "Memory: {{ ansible_memtotal_mb }}MB" >> {{ results_dir }}/summary.txt
        echo "" >> {{ results_dir }}/summary.txt
        
        for file in {{ results_dir }}/*_results.txt; do
          if [ -f "$file" ]; then
            echo "File: $(basename $file)" >> {{ results_dir }}/summary.txt
            grep "Requests/sec:" "$file" | tail -1 >> {{ results_dir }}/summary.txt
            echo "" >> {{ results_dir }}/summary.txt
          fi
        done

    - name: Fetch results to local machine
      fetch:
        src: "{{ results_dir }}/{{ item }}"
        dest: "./nginx_results/{{ ansible_hostname }}/"
        flat: yes
      loop:
        - baseline_results.txt
        - optimized_results.txt
        - connection_scaling_results.txt
        - gzip_results.txt
        - summary.txt
      ignore_errors: yes

    - name: Display summary
      debug:
        msg: "Performance tests completed. Results saved in {{ results_dir }}/ and fetched to local ./nginx_results/{{ ansible_hostname }}/"

# Template files needed (create these separately):
# templates/nginx_baseline.conf.j2
# templates/nginx_optimized.conf.j2
# templates/nginx_gzip.conf.j2